// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: commons/chunk.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Agrirouter.Commons {

  /// <summary>Holder for reflection information generated from commons/chunk.proto</summary>
  public static partial class ChunkReflection {

    #region Descriptor
    /// <summary>File descriptor for commons/chunk.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChunkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNjb21tb25zL2NodW5rLnByb3RvEhJhZ3Jpcm91dGVyLmNvbW1vbnMiWAoO",
            "Q2h1bmtDb21wb25lbnQSEgoKY29udGV4dF9pZBgBIAEoCRIPCgdjdXJyZW50",
            "GAIgASgDEg0KBXRvdGFsGAMgASgDEhIKCnRvdGFsX3NpemUYBCABKANiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Agrirouter.Commons.ChunkComponent), global::Agrirouter.Commons.ChunkComponent.Parser, new[]{ "ContextId", "Current", "Total", "TotalSize" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChunkComponent : pb::IMessage<ChunkComponent> {
    private static readonly pb::MessageParser<ChunkComponent> _parser = new pb::MessageParser<ChunkComponent>(() => new ChunkComponent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChunkComponent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Agrirouter.Commons.ChunkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkComponent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkComponent(ChunkComponent other) : this() {
      contextId_ = other.contextId_;
      current_ = other.current_;
      total_ = other.total_;
      totalSize_ = other.totalSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChunkComponent Clone() {
      return new ChunkComponent(this);
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 1;
    private string contextId_ = "";
    /// <summary>
    /// client generated unique identifier for larger binaries
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 2;
    private long current_;
    /// <summary>
    /// number of the current chunk 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private long total_;
    /// <summary>
    /// total number of chunks of binary
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "total_size" field.</summary>
    public const int TotalSizeFieldNumber = 4;
    private long totalSize_;
    /// <summary>
    /// total size of binary
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSize {
      get { return totalSize_; }
      set {
        totalSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChunkComponent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChunkComponent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContextId != other.ContextId) return false;
      if (Current != other.Current) return false;
      if (Total != other.Total) return false;
      if (TotalSize != other.TotalSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      if (Current != 0L) hash ^= Current.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      if (TotalSize != 0L) hash ^= TotalSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContextId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ContextId);
      }
      if (Current != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Current);
      }
      if (Total != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Total);
      }
      if (TotalSize != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      if (Current != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Current);
      }
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      if (TotalSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChunkComponent other) {
      if (other == null) {
        return;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
      if (other.Current != 0L) {
        Current = other.Current;
      }
      if (other.Total != 0L) {
        Total = other.Total;
      }
      if (other.TotalSize != 0L) {
        TotalSize = other.TotalSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ContextId = input.ReadString();
            break;
          }
          case 16: {
            Current = input.ReadInt64();
            break;
          }
          case 24: {
            Total = input.ReadInt64();
            break;
          }
          case 32: {
            TotalSize = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
